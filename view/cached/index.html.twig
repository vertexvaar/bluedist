{% extends "layout.html.twig" %}

{% block content %}
    <h1>Cached Controller</h1>

    <p>
        This page was rendered at <b>{{ renderTime|date("Y-m-d H:i:s") }}</b>
    </p>

    <p>
        Caching controller actions is very easy. All GET actions can be cached. The following example caches the action
        result for 1 minute.
    </p>

    <pre><code class="language-php">
class Cached extends AbstractController
{
    #[Route('/cached')]
    #[ActionCache(60)]
    public function index(): ResponseInterface
    {
        return $this->render('cached/index.html.twig', ['renderTime' => new DateTimeImmutable('now')]);
    }
}
    </code></pre>

    <p>
        You may have noticed, that the first call to this page took a bit longer than expected. That's because the
        action is stalled for a second. When you <a href="/cached">reload this page</a>, it will appear instantly,
        because the rendered content was cached.
        The caching is set to 5 seconds, so in 5 seconds the page rendering will be a bit slow, before this page shows
        up again.
    </p>

    {{ include('cached/_cache-info.html.twig') }}

    <p>
        Action caching also respects get parameters, but you have to tell the caching attribute which ones are relevant
        for your controller action.
        We have an <a href="/cached/params/test">example in action</a>
    </p>

    <p>
        <a href="/">Back to the index</a>
    </p>
{% endblock %}
